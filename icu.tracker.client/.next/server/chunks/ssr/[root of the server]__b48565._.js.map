{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/dell/Desktop/Hearts/icu.tracker/icu.tracker.client/components/EthiopiaHospitalsMap.js"],"sourcesContent":["'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup, Tooltip } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\n\r\n// Custom hospital icon (House-like, properly styled)\r\nconst hospitalIcon = new L.Icon({\r\n  iconUrl: 'https://cdn-icons-png.flaticon.com/512/1046/1046869.png', // Icon URL\r\n  iconSize: [50, 50], // Marker size\r\n  iconAnchor: [25, 50], // Anchor to center-bottom\r\n  popupAnchor: [0, -50], // Popup offset\r\n  shadowUrl: null, // No shadow\r\n  shadowSize: null,\r\n  shadowAnchor: null,\r\n});\r\n\r\nconst EthiopiaHospitalsMap = () => {\r\n  const [hospitals, setHospitals] = useState([]);\r\n  const [filteredHospitals, setFilteredHospitals] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch hospitals data from the backend API\r\n  useEffect(() => {\r\n    const fetchHospitals = async () => {\r\n      try {\r\n        const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL}/api/hospitals`);\r\n        console.log(response, 'response');\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        setHospitals(data.data || []);\r\n        setFilteredHospitals(data.data || []);\r\n      } catch (error) {\r\n        console.error('Error fetching hospitals:', error);\r\n        setError(error.message);\r\n      }\r\n    };\r\n\r\n    fetchHospitals();\r\n  }, []);\r\n\r\n  // Handle search input changes\r\n  const handleSearch = (event) => {\r\n    const query = event.target.value.toLowerCase();\r\n    setSearchQuery(query);\r\n\r\n    // Filter hospitals based on the search query\r\n    const filtered = hospitals.filter((hospital) =>\r\n      hospital.name.toLowerCase().includes(query)\r\n    );\r\n    setFilteredHospitals(filtered);\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: 'flex', height: '100vh', overflow: 'hidden' }}>\r\n      <div style={{ flex: 2, overflowY: 'auto', padding: '10px' }}>\r\n        <span>\r\n          <strong>Showing {filteredHospitals.length} hospitals</strong>\r\n        </span>\r\n        {filteredHospitals.map((hospital) => (\r\n          <div\r\n            key={hospital.id}\r\n            style={{\r\n              border: '1px solid #ccc',\r\n              borderRadius: '5px',\r\n              padding: '10px',\r\n              marginBottom: '10px',\r\n              backgroundColor: '#f9f9f9',\r\n            }}\r\n          >\r\n            <h3 style={{ margin: '0 0 10px 0' }}>{hospital.name}</h3>\r\n            <p style={{ margin: '0' }}>\r\n              <strong>Type:</strong>{' '}\r\n              {hospital.type === 'PRIVATE'\r\n                ? 'Private'\r\n                : hospital.type === 'GOVERNMENT'\r\n                ? 'Government'\r\n                : 'NGO'}\r\n            </p>\r\n            <p style={{ margin: '0' }}>\r\n              <strong>Total ICUs:</strong> {hospital.icuBeds}\r\n            </p>\r\n            <p style={{ margin: '0' }}>\r\n              <strong>Bed Capacity:</strong> {hospital.bedCapacity}\r\n            </p>\r\n            <p style={{ margin: '0' }}>\r\n              <strong>Last Updated:</strong>{' '}\r\n              {new Date(hospital.updatedAt).toLocaleString()}\r\n            </p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div\r\n        style={{\r\n          flex: 8,\r\n          position: 'relative',\r\n          height: '100%',\r\n          width: '100%',\r\n        }}\r\n      >\r\n        {/* Search Bar */}\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            top: '10px',\r\n            left: '50%',\r\n            transform: 'translateX(-50%)',\r\n            zIndex: 1000,\r\n            width: '80%',\r\n            maxWidth: '400px',\r\n          }}\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            value={searchQuery}\r\n            onChange={handleSearch}\r\n            placeholder=\"Search hospitals by name...\"\r\n            style={{\r\n              width: '100%',\r\n              padding: '10px',\r\n              border: '1px solid #ccc',\r\n              borderRadius: '5px',\r\n              fontSize: '16px',\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        {error ? (\r\n          <div\r\n            style={{\r\n              position: 'absolute',\r\n              top: '20%',\r\n              left: '50%',\r\n              transform: 'translateX(-50%)',\r\n              color: 'red',\r\n            }}\r\n          >\r\n            <strong>Error:</strong> {error}\r\n          </div>\r\n        ) : (\r\n          <MapContainer\r\n            center={[9.03, 38.74]}\r\n            zoom={12}\r\n            style={{ height: '100%', width: '100%' }}\r\n          >\r\n            <TileLayer\r\n              attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n\r\n            {/* Render markers */}\r\n            {filteredHospitals.map(\r\n              (hospital) =>\r\n                hospital.latitude &&\r\n                hospital.longitude && (\r\n                  <Marker\r\n                    key={hospital.id}\r\n                    position={[hospital.latitude, hospital.longitude]}\r\n                    icon={hospitalIcon}\r\n                  >\r\n                    {/* Tooltip for displaying hospital name */}\r\n                    <Tooltip direction=\"top\" offset={[0, -50]} permanent>\r\n                      <span style={{ fontWeight: 'bold', fontSize: '14px' }}>\r\n                        {hospital.name}\r\n                      </span>\r\n                    </Tooltip>\r\n\r\n                    <Popup>\r\n                      <div style={{ fontSize: '14px', lineHeight: '1.5' }}>\r\n                        <strong\r\n                          style={{\r\n                            color: '#c33',\r\n                            fontSize: '16px',\r\n                          }}\r\n                        >\r\n                          {hospital.name}\r\n                        </strong>\r\n                        <br />\r\n                        <strong>Type:</strong>{' '}\r\n                        {hospital.type === 'PRIVATE'\r\n                          ? 'Private'\r\n                          : hospital.type === 'GOVERNMENT'\r\n                          ? 'Government'\r\n                          : 'NGO'}\r\n                        <br />\r\n                        <strong>Total ICUs:</strong> {hospital.icuBeds}\r\n                        <br />\r\n                        <strong>Bed Capacity:</strong> {hospital.bedCapacity}\r\n                        <br />\r\n                        <strong>Last Updated:</strong>{' '}\r\n                        {new Date(hospital.updatedAt).toLocaleString()}\r\n                      </div>\r\n                    </Popup>\r\n                  </Marker>\r\n                )\r\n            )}\r\n          </MapContainer>\r\n        )}\r\n\r\n        {/* Legend Footer */}\r\n        <div\r\n          style={{\r\n            zIndex: 1000,\r\n            position: 'absolute',\r\n            bottom: 10,\r\n            left: '50%',\r\n            transform: 'translateX(-50%)',\r\n            backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n            padding: '10px',\r\n            borderRadius: '5px',\r\n            fontSize: '14px',\r\n          }}\r\n        >\r\n          <strong>Legend:</strong> P = Private, G = Government, NG = NGO\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EthiopiaHospitalsMap;\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 475, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}